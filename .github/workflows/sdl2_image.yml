name: 'sdl2'
run-name: 'Create SDL release artifacts'

on:
  workflow_dispatch:
  push:
    paths:
      - sdl2_image/**

jobs:
  windows:
    runs-on: windows-latest
    steps:
      - name: 'Setup Ninja'
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.12.1
      - name: 'Install SDL2'
        uses: libsdl-org/setup-sdl@main
        with:
          cmake-generator: Ninja
          install-linux-dependencies: true
          version: 2-latest
          add-to-environment: true
      - name: 'Checkout config'
        uses: actions/checkout@v4
        with:
          path: 'config'
          sparse-checkout: 'sdl2_image/config.json'
      - name: 'read config.json'
        id: config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: "config/sdl2_image/config.json"
      - name: 'repo tag'
        shell: bash
        run: |
          echo '${{steps.config.outputs.tag}}'
      - name: 'Checkout source'
        uses: actions/checkout@v4
        with:
          repository: 'libsdl-org/SDL_image'
          ref: ${{steps.config.outputs.tag}}
          fetch-depth: 0
          path: 'source'
      - name: 'cmake configure'
        shell: bash
        run: |
          cmake -S source -B build \
               -DSDL2IMAGE_VENDORED=ON \
               -DBUILD_SHARED_LIBS=ON \
               -DCMAKE_BUILD_TYPE=Release \
               -DSDL2IMAGE_BMP=OFF \
               -DSDL2IMAGE_GIF=OFF \
               -DSDL2IMAGE_LBM=OFF \
               -DSDL2IMAGE_PCX=OFF \
               -DSDL2IMAGE_PNM=OFF \
               -DSDL2IMAGE_QOI=OFF \
               -DSDL2IMAGE_TGA=OFF \
               -DSDL2IMAGE_XCF=OFF \
               -DSDL2IMAGE_XPM=OFF \
               -DSDL2IMAGE_XV=OFF \
               -DCMAKE_INSTALL_PREFIX=install \
               -DCMAKE_PREFIX_PATH=$"($sdlPrefixPath)" \
               -G "Visual Studio 17 2022" \
               -A x64
      - name: 'cmake build'
        shell: bash
        run: cmake --build build --config Release --parallel
      - name: 'cmake install'
        shell: bash
        run: cmake --install build --config Release
      - name: 'Store source archives'
        uses: actions/upload-artifact@v4
        with:
          name: 'sdl2_image-windows-${{steps.config.outputs.tag}}'
          path: '${{ github.workspace}}/install'

#  macos:
#    runs-on: macos-latest
#    steps:
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2_image/config.json'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2_image/config.json"
#      - name: 'repo tag'
#        shell: bash
#        run: |
#          echo '${{steps.config.outputs.tag}}'
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL_image'
#          ref: ${{steps.config.outputs.tag}}
#          fetch-depth: 0
#          path: 'source'
#      - name: 'xcodebuild'
#        shell: bash
#        run: |
#          xcodebuild -project source/Xcode/SDL/SDL.xcodeproj -target 'Framework' -configuration Release
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2_image-macos-${{steps.config.outputs.tag}}'
#          path: '${{ github.workspace}}/source/Xcode/SDL/build/Release'
#
#  ios:
#    runs-on: macos-latest
#    steps:
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2_image/config.json'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2_image/config.json"
#      - name: 'repo tag'
#        shell: bash
#        run: |
#          echo '${{steps.config.outputs.tag}}'
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL_image'
#          ref: ${{steps.config.outputs.tag}}
#          fetch-depth: 0
#          path: 'source'
#      - name: 'xcodebuild'
#        shell: bash
#        run: |
#          xcodebuild -project source/Xcode/SDL/SDL.xcodeproj -target 'xcFramework-iOS' -configuration Release
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2_image-ios-${{steps.config.outputs.tag}}'
#          path: '${{ github.workspace}}/source/Xcode/SDL/Products'
#
#  wasm:
#    runs-on: ubuntu-latest
#    steps:
#      - name: 'Setup Emscripten'
#        uses: mymindstorm/setup-emsdk@v14
#        with:
#          version: 3.1.62
#          actions-cache-folder: 'emsdk-cache'
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2_image/config.json'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2_image/config.json"
#      - name: 'repo tag'
#        shell: bash
#        run: |
#          echo '${{steps.config.outputs.tag}}'
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL_image'
#          ref: ${{steps.config.outputs.tag}}
#          fetch-depth: 0
#          path: 'source'
#      - name: 'cmake configure'
#        shell: bash
#        run: |
#          emcmake cmake -S source -B build \
#               -DSDL_WERROR=ON \
#               -DSDL_STATIC=ON \
#               -DSDL_TEST=OFF \
#               -DSDL_TESTS=OFF \
#               -DSDL_INSTALL_TESTS=OFF \
#               -DSDL2_DISABLE_INSTALL=OFF \
#               -DCMAKE_INSTALL_PREFIX=install \
#               -DCMAKE_BUILD_TYPE=Release
#      - name: 'cmake build'
#        shell: bash
#        run: cmake --build build --config Release --parallel
#      - name: 'cmake install'
#        shell: bash
#        run: cmake --install build --config Release
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2_image-wasm-${{steps.config.outputs.tag}}'
#          path: '${{ github.workspace}}/install'
#
#  android:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        arch: [ 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64' ]
#    steps:
#      - name: 'Setup Ninja'
#        uses: ashutoshvarma/setup-ninja@master
#        with:
#          version: 1.12.1
#      - name: 'Setup NDK'
#        id: setup-ndk
#        uses: nttld/setup-ndk@v1
#        with:
#          ndk-version: r27c
#          local-cache: true
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2_image/config.json'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2_image/config.json"
#      - name: 'repo tag'
#        shell: bash
#        run: |
#          echo '${{steps.config.outputs.tag}}'
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL_image'
#          ref: ${{steps.config.outputs.tag}}
#          fetch-depth: 0
#          path: 'source'
#      - name: 'cmake configure'
#        shell: bash
#        run: |
#          cmake -S source -B build \
#               -DCMAKE_BUILD_TYPE=Release \
#               -DCMAKE_TOOLCHAIN_FILE=${{steps.setup-ndk.outputs.ndk-path}}/build/cmake/android.toolchain.cmake \
#               -DCMAKE_INSTALL_PREFIX=install \
#               -DANDROID_PLATFORM="29" \
#               -DANDROID_ABI=${{ matrix.arch }} \
#               -DSDL_WERROR=OFF \
#               -DSDL_TEST=OFF \
#               -DSDL_TESTS=OFF \
#               -DSDL_STATIC=OFF \
#               -DSDL_INSTALL_TESTS=OFF \
#               -DSDL2_DISABLE_INSTALL=OFF \
#               -G Ninja
#      - name: 'cmake build'
#        shell: bash
#        run: cmake --build build --config Release --parallel
#      - name: 'cmake install'
#        shell: bash
#        run: cmake --install build --config Release
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2_image-android-${{ matrix.arch }}-${{steps.config.outputs.tag}}'
#          path: '${{ github.workspace}}/install'