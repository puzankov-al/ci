name: 'sdl2'
run-name: 'Build SDL2'

on:
  workflow_dispatch:
  push:
    paths:
      - sdl2/**

jobs:
#  windows_sdl:
#    runs-on: windows-latest
#    steps:
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2/config.json"
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL'
#          ref: ${{steps.config.outputs.sdl_tag}}
#          fetch-depth: 0
#          path: 'source'
#      - name: 'cmake configure'
#        shell: bash
#        run: |
#          cmake -S source -B build \
#               -DSDL_WERROR=ON \
#               -DSDL_STATIC=OFF \
#               -DSDL_TEST=OFF \
#               -DSDL_TESTS=OFF \
#               -DSDL_INSTALL_TESTS=OFF \
#               -DSDL2_DISABLE_INSTALL=OFF \
#               -A x64 \
#               -DCMAKE_INSTALL_PREFIX=install \
#               -DCMAKE_BUILD_TYPE=Release
#      - name: 'cmake build'
#        shell: bash
#        run: cmake --build build --config Release --parallel
#      - name: 'cmake install'
#        shell: bash
#        run: cmake --install build --config Release
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2-windows-${{steps.config.outputs.sdl_tag}}'
#          path: '${{ github.workspace}}/install'
#
#  windows_sdl_image:
#    needs: [windows_sdl]
#    runs-on: windows-latest
#    steps:
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2/config.json"
#      - name: 'Download SDL'
#        uses: actions/download-artifact@v4
#        with:
#          name: 'sdl2-windows-${{steps.config.outputs.sdl_tag}}'
#          path: '${{ github.workspace }}/sdl'
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL_image'
#          ref: ${{steps.config.outputs.sdl_image_tag}}
#          fetch-depth: 0
#          path: 'source'
#          submodules: recursive
#      - name: 'Patch SDL2_image'
#        shell: bash
#        run: 'cd source && git apply ../config/sdl2/sdl2_image.patch'
#      - name: 'diff SDL2_image'
#        shell: bash
#        run: 'cd source && git diff'
#      - name: 'cmake configure'
#        shell: bash
#        run: |
#          cmake -S source -B build \
#               -DSDL2IMAGE_VENDORED=ON \
#               -DBUILD_SHARED_LIBS=ON \
#               -DCMAKE_BUILD_TYPE=Release \
#               -DSDL2IMAGE_BMP=OFF \
#               -DSDL2IMAGE_GIF=OFF \
#               -DSDL2IMAGE_LBM=OFF \
#               -DSDL2IMAGE_PCX=OFF \
#               -DSDL2IMAGE_PNM=OFF \
#               -DSDL2IMAGE_QOI=OFF \
#               -DSDL2IMAGE_TGA=OFF \
#               -DSDL2IMAGE_XCF=OFF \
#               -DSDL2IMAGE_XPM=OFF \
#               -DSDL2IMAGE_XV=OFF \
#               -DCMAKE_INSTALL_PREFIX=install \
#               -DCMAKE_PREFIX_PATH='${{ github.workspace }}/sdl' \
#               -G "Visual Studio 17 2022" \
#               -A x64
#      - name: 'cmake build'
#        shell: bash
#        run: cmake --build build --config Release --parallel
#      - name: 'cmake install'
#        shell: bash
#        run: cmake --install build --config Release
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2_image-windows-${{steps.config.outputs.sdl_image_tag}}'
#          path: '${{ github.workspace}}/install'
#
#  windows_sdl_ttf:
#    needs: [windows_sdl]
#    runs-on: windows-latest
#    steps:
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2/config.json"
#      - name: 'Download SDL'
#        uses: actions/download-artifact@v4
#        with:
#          name: 'sdl2-windows-${{steps.config.outputs.sdl_tag}}'
#          path: '${{ github.workspace }}/sdl'
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL_ttf'
#          ref: ${{steps.config.outputs.sdl_ttf_tag}}
#          fetch-depth: 0
#          path: 'source'
#          submodules: recursive
#      - name: 'Patch SDL2_ttf'
#        shell: bash
#        run: 'cd source && git apply ../config/sdl2/sdl2_ttf.patch'
#      - name: 'diff SDL2_ttf'
#        shell: bash
#        run: 'cd source && git diff'
#      - name: 'cmake configure'
#        shell: bash
#        run: |
#          cmake -S source -B build \
#               -DBUILD_SHARED_LIBS=ON \
#               -DSDL2TTF_HARFBUZZ=ON \
#               -DSDL2TTF_SAMPLES=OFF \
#               -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
#               -DCMAKE_BUILD_TYPE=Release \
#               -DCMAKE_INSTALL_PREFIX=install \
#               -DCMAKE_PREFIX_PATH='${{ github.workspace }}/sdl' \
#               -G "Visual Studio 17 2022" \
#               -A x64
#      - name: 'cmake build'
#        shell: bash
#        run: cmake --build build --config Release --parallel
#      - name: 'cmake install'
#        shell: bash
#        run: cmake --install build --config Release
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2_ttf-windows-${{steps.config.outputs.sdl_ttf_tag}}'
#          path: '${{ github.workspace}}/install'

#  macos_sdl:
#    runs-on: macos-latest
#    steps:
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2/config.json"
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL'
#          ref: ${{steps.config.outputs.sdl_tag}}
#          fetch-depth: 0
#          path: 'source'
#      - name: 'xcodebuild'
#        shell: bash
#        run: |
#          xcodebuild -project source/Xcode/SDL/SDL.xcodeproj \
#                     -target 'Framework' \
#                     -configuration Release
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2-macos-${{steps.config.outputs.sdl_tag}}'
#          path: '${{ github.workspace}}/source/Xcode/SDL/build/Release'

#  macos_sdl_image:
#    runs-on: macos-latest
#    steps:
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2/config.json"
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL_image'
#          ref: ${{steps.config.outputs.sdl_image_tag}}
#          fetch-depth: 0
#          path: 'source'
#          submodules: recursive
#      - name: 'xcode build'
#        shell: bash
#        run: |
#          xcodebuild archive \
#                     -project source/Xcode/SDL_image.xcodeproj \
#                     -scheme 'Framework' \
#                     -configuration Release \
#                     -sdk macosx \
#                     -archivePath "${{ github.workspace}}/SDL2_image.xcarchive"
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2_image-macos-${{steps.config.outputs.sdl_image_tag}}'
#          path: '${{ github.workspace}}/SDL2_image.xcarchive/Products/Library/Frameworks'
#
#  macos_sdl_ttf:
#    runs-on: macos-latest
#    steps:
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2/config.json"
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL_ttf'
#          ref: ${{steps.config.outputs.sdl_ttf_tag}}
#          fetch-depth: 0
#          path: 'source'
#          submodules: recursive
#      - name: 'xcode build'
#        shell: bash
#        run: |
#          xcodebuild archive \
#                     -project source/Xcode/SDL_ttf.xcodeproj \
#                     -scheme 'Framework' \
#                     -configuration Release \
#                     -sdk macosx \
#                     -archivePath "${{ github.workspace}}/SDL2_ttf.xcarchive"
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2_ttf-macos-${{steps.config.outputs.sdl_ttf_tag}}'
#          path: '${{ github.workspace}}/SDL2_ttf.xcarchive/Products/Library/Frameworks'

#  ios_sdl:
#    runs-on: macos-latest
#    steps:
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2/config.json"
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL'
#          ref: ${{steps.config.outputs.sdl_tag}}
#          fetch-depth: 0
#          path: 'source'
#      - name: 'xcodebuild'
#        shell: bash
#        run: |
#          xcodebuild -project source/Xcode/SDL/SDL.xcodeproj \
#                     -target 'xcFramework-iOS' \
#                     -configuration Release
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2-ios-${{steps.config.outputs.sdl_tag}}'
#          path: '${{ github.workspace}}/source/Xcode/SDL/Products'

#  ios_sdl_image:
#    runs-on: macos-latest
#    steps:
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2/config.json"
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL_image'
#          ref: ${{steps.config.outputs.sdl_image_tag}}
#          fetch-depth: 0
#          path: 'source'
#          submodules: recursive
#      - name: 'Patch SDL2_image'
#        shell: bash
#        run: 'cd source && git apply ../config/sdl2/sdl2_image.patch'
#      - name: 'diff SDL2_image'
#        shell: bash
#        run: 'cd source && git diff'
#      - name: 'xcode build'
#        shell: bash
#        run: |
#          IPHONEOS_ARCHIVE_PATH="${{ github.workspace }}/install/SDL2_image-iphoneos.xcarchive"
#          IPHONESIMULATOR_ARCHIVE_PATH="${{ github.workspace }}/install/SDL2_image-iphonesimulator.xcarchive"
#
#          # todo: Framework schema compilation is broken for iphonesimulator
#          xcodebuild archive \
#                     -project source/Xcode/SDL_image.xcodeproj \
#                     -scheme 'Static Library' \
#                     -configuration Release \
#                     -sdk iphoneos \
#                     -archivePath $IPHONEOS_ARCHIVE_PATH
#
#          xcodebuild archive \
#                     PLATFORM=iOS \
#                     -project source/Xcode/SDL_image.xcodeproj \
#                     -scheme 'Static Library' \
#                     -configuration Release \
#                     -sdk iphonesimulator \
#                     -archivePath $IPHONESIMULATOR_ARCHIVE_PATH
#
#          xcodebuild -create-xcframework \
#                     -library "$IPHONEOS_ARCHIVE_PATH/Products/usr/local/lib/libSDL2_image.a" \
#                     -headers source/include \
#                     -library "$IPHONESIMULATOR_ARCHIVE_PATH/Products/usr/local/lib/libSDL2_image.a" \
#                     -headers source/include \
#                     -output install/xcframework/SDL2_image.xcframework
#
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2_image-ios-${{steps.config.outputs.sdl_image_tag}}'
#          path: '${{ github.workspace}}/install/xcframework'
#
#  ios_sdl_ttf:
#    runs-on: macos-latest
#    steps:
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2/config.json"
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL_ttf'
#          ref: ${{steps.config.outputs.sdl_ttf_tag}}
#          fetch-depth: 0
#          path: 'source'
#          submodules: recursive
#      - name: 'Patch SDL2_ttf'
#        shell: bash
#        run: 'cd source && git apply ../config/sdl2/sdl2_ttf.patch'
#      - name: 'diff SDL2_ttf'
#        shell: bash
#        run: 'cd source && git diff'
#      - name: 'xcode build'
#        shell: bash
#        run: |
#          IPHONEOS_ARCHIVE_PATH="${{ github.workspace }}/install/SDL2_ttf-iphoneos.xcarchive"
#          IPHONESIMULATOR_ARCHIVE_PATH="${{ github.workspace }}/install/SDL2_ttf-iphonesimulator.xcarchive"
#
#          # todo: Framework schema compilation is broken for iphonesimulator
#          xcodebuild archive \
#                     -project source/Xcode/SDL_ttf.xcodeproj \
#                     -scheme 'Static Library' \
#                     -configuration Release \
#                     -sdk iphoneos \
#                     -archivePath $IPHONEOS_ARCHIVE_PATH
#
#          xcodebuild archive \
#                     PLATFORM=iOS \
#                     -project source/Xcode/SDL_ttf.xcodeproj \
#                     -scheme 'Static Library' \
#                     -configuration Release \
#                     -sdk iphonesimulator \
#                     -archivePath $IPHONESIMULATOR_ARCHIVE_PATH
#
#          mkdir source/include
#          cp source/SDL_ttf.h source/include
#
#          xcodebuild -create-xcframework \
#                     -library "$IPHONEOS_ARCHIVE_PATH/Products/usr/local/lib/libSDL2_ttf.a" \
#                     -headers source/include \
#                     -library "$IPHONESIMULATOR_ARCHIVE_PATH/Products/usr/local/lib/libSDL2_ttf.a" \
#                     -headers source/include \
#                     -output install/xcframework/SDL2_ttf.xcframework
#
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2_ttf-ios-${{steps.config.outputs.sdl_ttf_tag}}'
#          path: '${{ github.workspace}}/install/xcframework'

#  wasm_sdl:
#    runs-on: ubuntu-latest
#    steps:
#      - name: 'Setup Emscripten'
#        uses: mymindstorm/setup-emsdk@v14
#        with:
#          version: 3.1.62
#          actions-cache-folder: 'emsdk-cache'
#      - name: 'Setup Ninja'
#        uses: ashutoshvarma/setup-ninja@master
#        with:
#          version: 1.12.1
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2/config.json"
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL'
#          ref: ${{steps.config.outputs.sdl_tag}}
#          fetch-depth: 0
#          path: 'source'
#      - name: 'cmake configure'
#        shell: bash
#        run: |
#          emcmake cmake -S source -B build \
#               -DSDL_WERROR=ON \
#               -DSDL_STATIC=ON \
#               -DSDL_TEST=OFF \
#               -DSDL_TESTS=OFF \
#               -DSDL_INSTALL_TESTS=OFF \
#               -DSDL2_DISABLE_INSTALL=OFF \
#               -DCMAKE_INSTALL_PREFIX=install \
#               -DCMAKE_BUILD_TYPE=Release \
#               -G Ninja
#      - name: 'cmake build'
#        shell: bash
#        run: cmake --build build --config Release --parallel
#      - name: 'cmake install'
#        shell: bash
#        run: cmake --install build --config Release
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2-wasm-${{steps.config.outputs.sdl_tag}}'
#          path: '${{ github.workspace}}/install'
#
#  wasm_sdl_image:
#    needs: [wasm_sdl]
#    runs-on: ubuntu-latest
#    steps:
#      - name: 'Setup Emscripten'
#        uses: mymindstorm/setup-emsdk@v14
#        with:
#          version: 3.1.62
#          actions-cache-folder: 'emsdk-cache'
#      - name: 'Setup Ninja'
#        uses: ashutoshvarma/setup-ninja@master
#        with:
#          version: 1.12.1
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2/config.json"
#      - name: 'Download SDL'
#        uses: actions/download-artifact@v4
#        with:
#          name: 'sdl2-wasm-${{steps.config.outputs.sdl_tag}}'
#          path: '${{ github.workspace }}/sdl'
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL_image'
#          ref: ${{steps.config.outputs.sdl_image_tag}}
#          fetch-depth: 0
#          path: 'source'
#          submodules: recursive
#      - name: 'Patch SDL2_image'
#        shell: bash
#        run: 'cd source && git apply ../config/sdl2/sdl2_image.patch'
#      - name: 'diff SDL2_image'
#        shell: bash
#        run: 'cd source && git diff'
#      - name: 'cmake configure'
#        shell: bash
#        run: |
#          emcmake cmake -S source -B build \
#               -DSDL2IMAGE_VENDORED=ON \
#               -DBUILD_SHARED_LIBS=OFF \
#               -DCMAKE_BUILD_TYPE=Release \
#               -DSDL2IMAGE_BMP=OFF \
#               -DSDL2IMAGE_GIF=OFF \
#               -DSDL2IMAGE_LBM=OFF \
#               -DSDL2IMAGE_PCX=OFF \
#               -DSDL2IMAGE_PNM=OFF \
#               -DSDL2IMAGE_QOI=OFF \
#               -DSDL2IMAGE_TGA=OFF \
#               -DSDL2IMAGE_XCF=OFF \
#               -DSDL2IMAGE_XPM=OFF \
#               -DSDL2IMAGE_XV=OFF \
#               -DCMAKE_INSTALL_PREFIX=install \
#               -DCMAKE_PREFIX_PATH='${{ github.workspace }}/sdl' \
#               -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=NEVER \
#               -G Ninja
#      - name: 'cmake build'
#        shell: bash
#        run: cmake --build build --config Release --parallel
#      - name: 'cmake install'
#        shell: bash
#        run: cmake --install build --config Release
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2_image-wasm-${{steps.config.outputs.sdl_image_tag}}'
#          path: '${{ github.workspace}}/install'
#
#  wasm_sdl_ttf:
#    needs: [wasm_sdl]
#    runs-on: ubuntu-latest
#    steps:
#      - name: 'Setup Emscripten'
#        uses: mymindstorm/setup-emsdk@v14
#        with:
#          version: 3.1.62
#          actions-cache-folder: 'emsdk-cache'
#      - name: 'Setup Ninja'
#        uses: ashutoshvarma/setup-ninja@master
#        with:
#          version: 1.12.1
#      - name: 'Checkout config'
#        uses: actions/checkout@v4
#        with:
#          path: 'config'
#          sparse-checkout: 'sdl2'
#      - name: 'read config.json'
#        id: config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: "config/sdl2/config.json"
#      - name: 'Download SDL'
#        uses: actions/download-artifact@v4
#        with:
#          name: 'sdl2-wasm-${{steps.config.outputs.sdl_tag}}'
#          path: '${{ github.workspace }}/sdl'
#      - name: 'Checkout source'
#        uses: actions/checkout@v4
#        with:
#          repository: 'libsdl-org/SDL_ttf'
#          ref: ${{steps.config.outputs.sdl_ttf_tag}}
#          fetch-depth: 0
#          path: 'source'
#          submodules: recursive
#      - name: 'Patch SDL2_ttf'
#        shell: bash
#        run: 'cd source && git apply ../config/sdl2/sdl2_ttf.patch'
#      - name: 'diff SDL2_ttf'
#        shell: bash
#        run: 'cd source && git diff'
#      - name: 'cmake configure'
#        shell: bash
#        run: |
#          emcmake cmake -S source -B build \
#               -DBUILD_SHARED_LIBS=OFF \
#               -DSDL2TTF_VENDORED=ON \
#               -DSDL2TTF_HARFBUZZ=ON \
#               -DSDL2TTF_SAMPLES=OFF \
#               -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
#               -DCMAKE_BUILD_TYPE=Release \
#               -DCMAKE_INSTALL_PREFIX=install \
#               -DCMAKE_PREFIX_PATH='${{ github.workspace }}/sdl' \
#               -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=NEVER \
#               -G Ninja
#      - name: 'cmake build'
#        shell: bash
#        run: cmake --build build --config Release --parallel
#      - name: 'cmake install'
#        shell: bash
#        run: cmake --install build --config Release
#      - name: 'Store source archives'
#        uses: actions/upload-artifact@v4
#        with:
#          name: 'sdl2_ttf-wasm-${{steps.config.outputs.sdl_ttf_tag}}'
#          path: '${{ github.workspace}}/install'

  android_sdl:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64' ]
    steps:
      - name: 'Setup Ninja'
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.12.1
      - name: 'Setup NDK'
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
          local-cache: true
      - name: 'Checkout config'
        uses: actions/checkout@v4
        with:
          path: 'config'
          sparse-checkout: 'sdl2'
      - name: 'read config.json'
        id: config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: "config/sdl2/config.json"
      - name: 'Checkout source'
        uses: actions/checkout@v4
        with:
          repository: 'libsdl-org/SDL'
          ref: ${{steps.config.outputs.sdl_tag}}
          fetch-depth: 0
          path: 'source'
      - name: 'clang version'
        shell: bash
        run: '/home/runner/.setup-ndk/r27c/toolchains/llvm/prebuilt/linux-x86_64/bin/clang --version'
      - name: 'cmake configure'
        shell: bash
        run: |
          cmake -S source -B build \
               -DCMAKE_BUILD_TYPE=Release \
               -DCMAKE_TOOLCHAIN_FILE=${{steps.setup-ndk.outputs.ndk-path}}/build/cmake/android.toolchain.cmake \
               -DCMAKE_INSTALL_PREFIX=install \
               -DANDROID_PLATFORM="29" \
               -DANDROID_ABI=${{ matrix.arch }} \
               -DSDL_WERROR=OFF \
               -DSDL_TEST=OFF \
               -DSDL_TESTS=OFF \
               -DSDL_STATIC=OFF \
               -DSDL_INSTALL_TESTS=OFF \
               -DSDL2_DISABLE_INSTALL=OFF \
               -G Ninja
      - name: 'cmake build'
        shell: bash
        run: cmake --build build --config Release --parallel
      - name: 'cmake install'
        shell: bash
        run: cmake --install build --config Release
      - name: 'Store source archives'
        uses: actions/upload-artifact@v4
        with:
          name: 'sdl2-android-${{ matrix.arch }}-${{steps.config.outputs.sdl_tag}}'
          path: '${{ github.workspace}}/install'

  android_sdl_image:
    needs: [android_sdl]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64' ]
    steps:
      - name: 'Setup Ninja'
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.12.1
      - name: 'Setup NDK'
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
          local-cache: true
      - name: 'Checkout config'
        uses: actions/checkout@v4
        with:
          path: 'config'
          sparse-checkout: 'sdl2'
      - name: 'read config.json'
        id: config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: "config/sdl2/config.json"
      - name: 'Download SDL'
        uses: actions/download-artifact@v4
        with:
          name: 'sdl2-android-${{ matrix.arch }}-${{steps.config.outputs.sdl_tag}}'
          path: '${{ github.workspace }}/sdl'
      - name: 'Checkout source'
        uses: actions/checkout@v4
        with:
          repository: 'libsdl-org/SDL_image'
          ref: ${{steps.config.outputs.sdl_image_tag}}
          fetch-depth: 0
          path: 'source'
      - name: 'Patch SDL2_image'
        shell: bash
        run: 'cd source && git apply ../config/sdl2/sdl2_image.patch'
      - name: 'diff SDL2_image'
        shell: bash
        run: 'cd source && git diff'
      - name: 'clang version'
        shell: bash
        run: '/home/runner/.setup-ndk/r27c/toolchains/llvm/prebuilt/linux-x86_64/bin/clang --version'
      - name: 'cmake configure'
        shell: bash
        run: |
          cmake -S source -B build \
               -DSDL2IMAGE_VENDORED=ON \
               -DBUILD_SHARED_LIBS=ON \
               -DCMAKE_BUILD_TYPE=Release \
               -DSDL2IMAGE_BMP=OFF \
               -DSDL2IMAGE_GIF=OFF \
               -DSDL2IMAGE_LBM=OFF \
               -DSDL2IMAGE_PCX=OFF \
               -DSDL2IMAGE_PNM=OFF \
               -DSDL2IMAGE_QOI=OFF \
               -DSDL2IMAGE_TGA=OFF \
               -DSDL2IMAGE_XCF=OFF \
               -DSDL2IMAGE_XPM=OFF \
               -DSDL2IMAGE_XV=OFF \
               -DCMAKE_INSTALL_PREFIX=install \
               -DCMAKE_PREFIX_PATH='${{ github.workspace }}/sdl' \
               -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=BOTH \
               -DCMAKE_TOOLCHAIN_FILE=${{steps.setup-ndk.outputs.ndk-path}}/build/cmake/android.toolchain.cmake \
               -DANDROID_PLATFORM="29" \
               -DANDROID_ABI=${{ matrix.arch }} \
               -G Ninja
      - name: 'cmake build'
        shell: bash
        run: cmake --build build --config Release --parallel
      - name: 'cmake install'
        shell: bash
        run: cmake --install build --config Release
      - name: 'Store source archives'
        uses: actions/upload-artifact@v4
        with:
          name: 'sdl2_image-android-${{ matrix.arch }}-${{steps.config.outputs.sdl_image_tag}}'
          path: '${{ github.workspace}}/install'


  android_sdl_ttf:
    needs: [android_sdl]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64' ]
    steps:
      - name: 'Setup Ninja'
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.12.1
      - name: 'Setup NDK'
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
          local-cache: true
      - name: 'Checkout config'
        uses: actions/checkout@v4
        with:
          path: 'config'
          sparse-checkout: 'sdl2'
      - name: 'read config.json'
        id: config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: "config/sdl2/config.json"
      - name: 'Download SDL'
        uses: actions/download-artifact@v4
        with:
          name: 'sdl2-android-${{ matrix.arch }}-${{steps.config.outputs.sdl_tag}}'
          path: '${{ github.workspace }}/sdl'
      - name: 'Checkout source'
        uses: actions/checkout@v4
        with:
          repository: 'libsdl-org/SDL_ttf'
          ref: ${{steps.config.outputs.sdl_ttf_tag}}
          fetch-depth: 0
          path: 'source'
      - name: 'Patch SDL2_ttf'
        shell: bash
        run: 'cd source && git apply ../config/sdl2/sdl2_ttf.patch'
      - name: 'diff SDL2_ttf'
        shell: bash
        run: 'cd source && git diff'
      - name: 'clang version'
        shell: bash
        run: '/home/runner/.setup-ndk/r27c/toolchains/llvm/prebuilt/linux-x86_64/bin/clang --version'
      - name: 'cmake configure'
        shell: bash
        run: |
          cmake -S source -B build \
               -DBUILD_SHARED_LIBS=ON \
               -DSDL2TTF_VENDORED=ON \
               -DSDL2TTF_HARFBUZZ=ON \
               -DSDL2TTF_SAMPLES=OFF \
               -DCMAKE_TOOLCHAIN_FILE=${{steps.setup-ndk.outputs.ndk-path}}/build/cmake/android.toolchain.cmake \
               -DANDROID_PLATFORM="29" \
               -DANDROID_ABI=${{ matrix.arch }} \
               -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
               -DCMAKE_BUILD_TYPE=Release \
               -DCMAKE_INSTALL_PREFIX=install \
               -DCMAKE_PREFIX_PATH='${{ github.workspace }}/sdl' \
               -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=BOTH \
               -G Ninja
      - name: 'cmake build'
        shell: bash
        run: cmake --build build --config Release --parallel
      - name: 'cmake install'
        shell: bash
        run: cmake --install build --config Release
      - name: 'Store source archives'
        uses: actions/upload-artifact@v4
        with:
          name: 'sdl2_ttf-android-${{ matrix.arch }}-${{steps.config.outputs.sdl_ttf_tag}}'
          path: '${{ github.workspace}}/install'
